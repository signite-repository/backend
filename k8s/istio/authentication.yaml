# Istio JWT Authentication 설정
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: signite-jwt-auth
  namespace: default
spec:
  selector:
    matchLabels:
      app: signite-backend
  jwtRules:
  - issuer: "https://auth.signite.com"
    jwksUri: "https://auth.signite.com/.well-known/jwks.json"
    audiences:
    - "signite-api"
    fromHeaders:
    - name: Authorization
      prefix: "Bearer "
    fromParams:
    - "token"

---
# 7단계 권한 시스템을 위한 Authorization Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: signite-authz-policy
  namespace: default
spec:
  selector:
    matchLabels:
      app: signite-backend
  rules:
  # Level 7: 슈퍼 관리자 - 모든 접근 허용
  - when:
    - key: request.auth.claims[role]
      values: ["SUPER_ADMIN"]
  
  # Level 6: 본부 관리자 - 관리 기능 접근
  - to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/admin/*"]
    when:
    - key: request.auth.claims[role]
      values: ["HQ_ADMIN", "SUPER_ADMIN"]
  
  # Level 4-5: 시그/지회 관리자 - 해당 조직 관리
  - to:
    - operation:
        methods: ["POST", "PUT", "DELETE"]
        paths: ["/api/post/*", "/api/category/*"]
    when:
    - key: request.auth.claims[role]
      values: ["SIG_ADMIN", "BRANCH_ADMIN", "HQ_ADMIN", "SUPER_ADMIN"]
    - key: request.auth.claims[organizationId]
      values: ["*"] # 실제로는 허용된 조직 ID 리스트
  
  # Level 2-3: 일반 회원 - 읽기 및 댓글 작성
  - to:
    - operation:
        methods: ["GET"]
    when:
    - key: request.auth.claims[role]
      values: ["ACTIVE_MEMBER", "BOARD_MODERATOR", "SIG_ADMIN", "BRANCH_ADMIN", "HQ_ADMIN", "SUPER_ADMIN"]
  
  - to:
    - operation:
        methods: ["POST"]
        paths: ["/api/comment/*", "/api/post/create"]
    when:
    - key: request.auth.claims[role]
      values: ["ACTIVE_MEMBER", "BOARD_MODERATOR", "SIG_ADMIN", "BRANCH_ADMIN", "HQ_ADMIN", "SUPER_ADMIN"]
  
  # Level 1: 게스트 - 읽기만 허용 (인증 없음도 허용)
  - to:
    - operation:
        methods: ["GET"]
        paths: ["/api/post/list", "/api/category/list"] 