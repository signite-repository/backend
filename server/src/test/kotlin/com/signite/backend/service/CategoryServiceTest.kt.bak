package com.signite.backend.service

import com.signite.backend.domain.dto.CategoryDTO
import com.signite.backend.domain.entity.Category
import com.signite.backend.repository.CategoryCacheRepository
import com.signite.backend.repository.CategoryRepository
import com.signite.backend.repository.PostRepository
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension
import org.mockito.kotlin.*
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import reactor.test.StepVerifier

@ExtendWith(MockitoExtension::class)
class CategoryServiceTest {

    @Mock
    private lateinit var categoryRepository: CategoryRepository
    
    @Mock
    private lateinit var categoryCacheRepository: CategoryCacheRepository
    
    @Mock
    private lateinit var postRepository: PostRepository
    
    private lateinit var categoryService: CategoryService
    
    private lateinit var testCategory: Category
    private lateinit var testCategoryDTO: CategoryDTO
    
    @BeforeEach
    fun setUp() {
        categoryService = CategoryService(
            categoryRepository,
            categoryCacheRepository,
            postRepository
        )
        
        reset(categoryRepository, categoryCacheRepository, postRepository)
        
        testCategory = Category(
            id = 1,
            title = "테스트 카테고리",
            thumbnail = "test.jpg"
        )
        
        testCategoryDTO = CategoryDTO(
            id = 1,
            title = "테스트 카테고리",
            thumbnail = "test.jpg",
            posts = 5
        )
    }
    
    @Test
    fun `카테고리_전체_조회가_성공적으로_처리된다`() {
        // Given
        whenever(categoryRepository.findAllAndCount())
            .thenReturn(Flux.just(testCategoryDTO))
        
        // When & Then
        StepVerifier.create(categoryService.getCategoryAll())
            .expectNextMatches { category ->
                category.id == 1 &&
                category.title == "테스트 카테고리" &&
                category.posts == 5
            }
            .verifyComplete()
    }
    
    @Test
    fun `카테고리가_존재하지_않으면_생성한다`() {
        // Given
        val newCategoryTitle = "새 카테고리"
        whenever(categoryRepository.existsByTitle(newCategoryTitle))
            .thenReturn(Mono.just(false))
        whenever(categoryRepository.save(any<Category>()))
            .thenReturn(Mono.just(testCategory.copy(title = newCategoryTitle)))
        
        // When & Then
        StepVerifier.create(categoryService.createCategoryIfNot(newCategoryTitle))
            .expectNextMatches { category ->
                category.title == newCategoryTitle
            }
            .verifyComplete()
            
        verify(categoryRepository).save(any<Category>())
    }
    
    @Test
    fun `카테고리가_이미_존재하면_기존_카테고리를_반환한다`() {
        // Given
        val existingTitle = "기존 카테고리"
        whenever(categoryRepository.existsByTitle(existingTitle))
            .thenReturn(Mono.just(true))
        whenever(categoryRepository.findByTitle(existingTitle))
            .thenReturn(Mono.just(testCategory.copy(title = existingTitle)))
        
        // When & Then
        StepVerifier.create(categoryService.createCategoryIfNot(existingTitle))
            .expectNextMatches { category ->
                category.title == existingTitle
            }
            .verifyComplete()
            
        verify(categoryRepository, never()).save(any<Category>())
    }
    
    @Test
    fun `캐시에서_카테고리_조회가_성공적으로_처리된다`() {
        // Given
        val cachedCategories = mutableListOf(testCategoryDTO)
        val categoryListDTO = com.signite.backend.domain.dto.CategoryListDTO(cachedCategories)
        
        whenever(categoryCacheRepository.findAllAndCaching())
            .thenReturn(Mono.just(categoryListDTO))
        
        // When & Then
        StepVerifier.create(categoryService.getAllAndCache())
            .expectNextMatches { categories ->
                categories.size == 1 &&
                categories[0].title == "테스트 카테고리"
            }
            .verifyComplete()
    }
    
    @Test
    fun `캐시가_비어있으면_DB에서_조회하고_캐시에_저장한다`() {
        // Given
        val categories = mutableListOf(testCategoryDTO)
        val categoryListDTO = com.signite.backend.domain.dto.CategoryListDTO(categories)
        
        whenever(categoryCacheRepository.findAllAndCaching())
            .thenReturn(Mono.empty())
        whenever(categoryRepository.findAllAndCount())
            .thenReturn(Flux.just(testCategoryDTO))
        whenever(categoryCacheRepository.setCategoriesAllAndCaching(any()))
            .thenReturn(Mono.just(categoryListDTO))
        
        // When & Then
        StepVerifier.create(categoryService.getAllAndCache())
            .expectNextMatches { result ->
                result.size == 1 &&
                result[0].title == "테스트 카테고리"
            }
            .verifyComplete()
            
        verify(categoryCacheRepository).setCategoriesAllAndCaching(any())
    }
} 